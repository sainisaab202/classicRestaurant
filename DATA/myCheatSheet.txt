----To Checksum for any downloaded software with fciv
C:\fciv\fciv.exe -sha1 "c:\Users\GurPreet SaiNi\Downloads\xampp-windows-x64-7.4.13-1-VC15-installer.exe"

----In xampp
c:\xampp\htdocs\ : is a public folder which contain all websites
/opt/lampp/htdoc  : is public folder for linux

.\cars\asdf.html : is for files/folders in current folder
..\cars\qwer.html : is for files/folders in previous directory

php.ini config: contains headerfiles for a website.

----			----HEADERS----
always use UTF-8
	1. check your project default charset = utf-8
	2. send network headers BEFORE echoing any text (often done automatically by browser)
		header('Content-Type: text/html; charset=UTF-88')
	3. write meta tag in your code to use utf-8

//to send the user to another page
header('Location: www.anyWebsite.com');
----
to force browser to load everything again use ctrl+F5

----
. (dot) is use to concatnate strings in php
-> is use to access properties/methods of an object
\ is use to escape a character like a space, a quote, or any charater

---- TO DECLARE CONSTANT
define(constantName, constantValue)	--both should be in double quotes / single

---- Debugging variable
echo $variable;		# to display value
var_dump($variable);	# very technical info, all info datatype, size and value
print_r($variable);	# not all info, but it will be much easier to read

---- Double quotes and single quotes
using a $variable inside double quotes works perfectly
BUT in single quotes, it will show the name of varable as it is.

---- Functions
strlen($variableName) : will show the length of the string. *its a non utf-8 function
mb_strlen($variableName) : is same as strlen() but support utf-8 means Ã© count as 1 char.
			mb stands for multi-byte string lenght.
substr(string, startingIndex, length): returns a substring from specified string, starting, length
strpos(string, "text2search"): returns a starting position of your text in the specified string.
str_replace(search, replace, fullString) : to replace some text in a given string.
str_ireplace(search, replace, fullString) : non case sensetive and same work as str_replace.
explode("seprator", string): returns an array of strings seprated by specified seprator.
implode("seprator", array): returns a string by combining all strings in specified array.

count(array/object): returns length of the array or a countable object.
ord(aCharacter): return the binaryValue(codePoint) of the first byte of character.
chr(codePoint): return the character related to the specified codePoint.

gettype($variable): return the type of the variable
settype($variable, 'newDataType'): change the variable datatype into specified and RETURNS boolean
		another way to convert is 	$one = (string)$two 	//this is casting
		intval($variable)	//this will ignore the characters

is_numeric($variable): return true is variable is numeric can be decimal numbers as well.
ctype_digit($variable): return true only if variable contain only 0-9 digits else false.
is_nan($variable): return true if variable is not a numeric.

--Array
#indexed arrays
        ###sort($myAssociativeArray);       //sort work only with indexed array
        ###rsort($myAssociativeArray);      //sort by reverse order
        #associativeArray       //its case senstive
//        asort($myAssociativeArray);         //sort by valuse
//        arsort($myAssociativeArray);        //value reversed sort
//        ksort($myAssociativeArray);         //to sort by keys
//        krsort($myAssociativeArray);        //to reverse sort by keys
        foreach ($myAssociativeArray as $value){    //for values only

array_push($arrayName, item1,item2....): to insert values into an array at the end.
array_pop($arrayName): to remove the last item in an array.
array_shift($arrayName): to remove the first item in an array.
unset($arrayName[index]): to remove item on a specific index of an array.

trim($variable): return a string by removing leading and trailing spaces.

--JSON javascript object notation
we cannot send array directly one pc to another so first we need to convert it into string
json_encode($arrayVariable): will return a JSON string (convert array into json string)
json_decode($JsonStringVar): will return an object (convert jsonString into object)

--Datetime
= new DateTime('yyyy-mm-dd'): will create an object of Datetime
strtotime('anydate'): will return seconds elapse 1970 otherwise return false (validate date)
checkdate(dd,mm,yyy): will return true if date is valid otherwise false
date("D-M-Y"): will return a string of current date in the specified formate
getdate(): will return an array contaning current timestamp if nothing is specifed

--Userdefine functions
always use optional parameters at the end of function defintion
like: function functionName(par1, par2, par3=100)
here par3 is optional and we can use function by sending only 2 parameters
-	use & to receive parameter as a reference
- 	use global keyword in front of globalVariableName use access global variable in a function

-	Use include 'file_path' to import functions from other files
	also use include_once to ignore import repetions errors.
	require, require_once is to get import fuctions and if file is not availabe it will 
		through error.

----form GET and POST method	:to send data from client to server with any request
<form method="GET":	is used and worked with url (everything is saved in the browser history)
<from method="POST":	It is never saved in the browser history and didn't use url & more secure.
	<form action="index.php" method="POST>
	give name to all of our fields
	
	#superglobal variables
    #   $_POST array containing all the data you POSTed
    #   $_GET array coontaining all the data you GET
    #   $_REQUEST either $_POST or $_GET

----To validate strings/ text-inputs
	filter_input(INPUT_POST, "firstName", FILTER_SANITIZE_STRING);
	echo "<br> Filter #3 htmlspecialchars: ".htmlspecialchars($firstName);

---------------------------------------------------------------------------------------------
-----File operations	//r: to read, w: to write, a: append	*file will save in htdocs.

$variable = fopen("fileName.ex","r/w/a"):	will open a file and assign it to a variable.

fopen("fileName.ex","r/w/a") or die("file doesn't exist);  will avoid error if file is not there.

fwrite($variable,"your string or" $variable):	will help us to write in a file

fclose($variable): will close file.

file_put_contents("filename.xx", "your stuff to write", FILE_APPEND):	will do same but slow



-----------------errors
compile error: code does not start
runtime error: division by zero
logical error: doing something wrong logically


-----------------Page cache	//to prevent using cache of browser
header("Expires: Thu, 01 Dec 1994 08:00:00 GMT");

//for cache
header("Cache-Control: no-cache");

header("Pragma: no-cache");

---- starting new website

----GIT
green: add
blue: modify
red: delete

black: save correctly in Git

1) Create an empty project 
2) Select Team->Git->Initialize repository
3) Make sure the correct folder is selected. if not, choose from browser.
(These 3 steps to creste the .git folder)

4) Everyday of work, right click on Project -> Git -> Commit
5) Type-in commit message and commit your work.

--------------------------------------------------------------------------------------------

---- GLOBAL Variable
$_GET: is a variable works with the arguments from url
$_POST:  is a variable works with the argument from the form of a website 
$_COOKIE: is a variable works with the cookies stuff of a website
$_SESSION: is a variable works with the temperory cookies and simillar to cookie

project name firstName
setcookie("name", "value") : use to set the cookie for a website
setcookie("name", "value", time()+10(sec)) : use to set the cookie for a website with expiry time

//for session we need to start a session in the starting of a website
session_start();	will start the session
$_SESSION['anyVariableName'] = valueToSave	will store a variable and its value 
session_destroy; 	will stop and unset all the values that $_SESSION handles

---------HTTPS---------
for HTTP we use port 80
for HTTPS we use port 443
to create privateKey and certificate in linux:
openssl req -x509 -newkey rsa:4096 -keyout jf.key -out jf.crt -days 365 -nodes(-days 365 is optional, -nodes mean no password)
for windows: (you need to install cygwin)
2.a)
c:\cygwin64\bin\openssl req -x509 -newkey rsa:4096 -days 365 -nodes -keyout jf.key -out jf.crt
b)
c:\cygwin64\bin\openssl
OpenSSL> req -x509 -newkey rsa:4096 -days 365 -nodes -keyout jf.key -out jf.crt
	(your file should be created in the current folder)
3. copy the .crt file into the c:\xampp\apache\conf\ssl.crt folder
   copy the .key file into the c:\xampp\apache\conf\ssl.key folder
4. edit the httpd-ssl.conf file:
	SSLCertificateFile conf/ssl/crt/jf.crt
	SSLCERTificateKeyFile conf/ssl.key/jf.key
5. restart apache
7. in browser use https before your site
8. review your certificate
--------------------------

--To force any website to use secure connection(HTTPS)

if(!isset($_SERVER['HTTPS']) || $_SERVER['HTTPS'] != "on"){
    header("Location: https://".$_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
    exit();
}

$_SERVER['HTTPS'] : is on when you use https connection (network protocol)
$_SERVER['HTTP_HOST'] : to know the host of the website (localhost in our case)
$_SERVER['REQUEST_URI'] : is the path of our website (starts from our project name in our case)

---URL consists
network protocol 	://	domain		/folders/file
http or https		://	www.fb.com	/sainisaab202/profile

----- 	MY-SQL
Just try to connect, to confirm you have an empty root password
1) Open a command prompt
2) c:\xampp\mysql\bin\mysql.exe -u root -p
	password: (just press ENTER)		now its asdf1234
3) MySQL > select @@version;
4) exit;
-----------------
To modify existing password:
c:\xampp\mysql\bin\mysql.exe -u root password
	password: type the new password and press ENTER

HeidiSQL download to manage database

------------------	also we NEVER send website to a client that use root
Creating DB	(HeidiSQL)
Collation: we use utf8mb4_general_ci which specify the language and the way our db stores.
Name: we must use only lowercase letters and underscore to specify name of database.

------------------ Each table
MUST have column name starts with table name followed by underscore and real column name.
MUST contain UUID as a primary KEY default with "SELECT UUID();"

Most of the time we use VARCHAR but we use CHAR for uuid with length 36.
CHAR, VARCHAR, INT, DECIMAL, BIT, DATE, DATETIME

we use key usually on foreign key

------------------ 
We always put sql code under procedure not in php

if we use SELECT in procedure and it returns more than ONE row we should use ORDER BY command

------------------JOINS
INNER JOIN : There must be data on each side of the join clause
LEFT JOIN : must show all the data from the left table and related data from right table


------------------To add a user for your database
1. click on 2 faces(manage user)
2. add->enter userName and password
3. click objects -> select all views and procedure
4. In each view/procedure select only SELECT/EXECUTE
5. Save

------------------To backup out database
1. right click on database-> export to SQL
2. we select db->check create database and table-> select single .sql file and name it
show grants for user_name@localhost	//need to add permission in another file for project


------------------to repair mysql installation (after update)
c:\xampp\mysql\bin\mysql_upgrade.exe -u root -p -r


------------------connecting php to database
PDO (PHP data objects) : handle 12 databases
	will raise errors and exceptions

mySQLi (improved)    can connect only to mySQL databases
	you need more conditions to check for valid data

--connect with database
$connectionName = new PDO("mysql:host=localhost; dbname=databaseName",userName, password);

--to raise exception if our sql query is not valid 
$connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

--then we make query
$SQLQuery = "our query or call to stored procedure";

--then we prepare our query
$PDOStatement = $connection->prepare($SQLQuery);

--we bind our parameters with our sqlStatement
$PDOStatement->bindParam(":variableNameinQUERY", $variableTheValue);

--we execute
$PDOStatement->execute();

--we can fetch row using loop or if depending on multiple result or single
$row = $PDOStatement->fetch()

--then close everything
$PDOStatement->closeCursor();
$PDOStatement = null;
$connection = null;	//will close connection after all our queries


-------------------to Encrypt our passwords inside PHP
--encryption				//this is algo of hashing
password_hash($PasswordVariable, PASSWORD_DEFAULT);	//will return an encrypted password
	//even if password is same the result of this is different

--decryption	//we can not decrypt but can verify it using:
password_verify($userPass, $encryptedHashPass)	//will return true if same else false


-------------------MVC		//MVVM (for cell phones)
Model - View - Controller
Model: classes / objects, business rules, centralized validation
View: show the data received
Controller: user input

.exe: for executable (input / output)
.dll: for libraries, objects

-------------------Class
Access modif
public : can be accessed from outside of the object;
private : can be accessed only from the current class;
protected : can only be accessed by the classess that inherits the current class

variables: properties like year, brand
function : methods like sell, print

getters: to read in our variables
setters: to write in our variables

self : use self keyword when you want to access CONSTANTS (self::) also use to access static membr
this : use this keyword when you want to access VARIABLES (this->)

const : we use const keyword before variable names to make them constant

STATIC : it always exists all the time during the program execution.

--------------------AJAX	-Asynchronous JavaScript And XML
xhr variable is to make AJAX call

var xhr = new XMLHttpRequest();

xhr.open("POST", #pageThatHaveCode);

//this will tell that only text stuff
xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');

//then we take the valuse of the things we gonna use like:
var anYear = document.getElementById("anYear").value;

//then we send our variables:
xhr.send("Year=" + anYear);

//calling function which will write respose to our current page
xhr.onreadystatechange = function(){
	if(xhr.readyState == 4 && xhr.status == 200){
            document.getElementById("anyContainer").innerHTML = xhr.responseText;
        }
};